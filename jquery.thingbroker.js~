/*
* Ajax-based layer for supporting NUI interaction between displays
* Author: Roberto Calderon
*


EVENTS
(#id).thing("append": "<p>helloworld</p>", to: "#id2")
(#id).thing("prepend": "<p>helloworld</p>", to: "#id2")
(#id).thing("remove": "<p>helloworld</p>", to: "#id2")
(#id).thing("src": "http://localhost/img.jpg", to: "#id2")

LISTENER THING
(#id).thing(listen:true)

OTHER METHODS
(#id).thing("follow": "#id2")

DATA SOURCES
(#id).thing.events

 */


(function($) {
  
  $.fn.thing = function(params) {
    var now = (new Date).getTime();
    params = $.extend({
	//url:'http://kimberly.magic.ubc.ca:8080/thingbroker',
        url:'http://localhost:8080/thingbroker',
	//name: this.attr('id'),
	thingId: this.attr('id'),
        thingName: this.attr('id'),
        thingType: this.tagName,
        listen: false,
        event_key: '',
        event_value: '',
	container: true, //true: thread topics based on display_id cookie, you can turn this off (false)
        timestamp: (new Date).getTime(), //timestamp of the latest event by the object
    },params);    
    
    //traverse all nodes
    this.each(function(){
      var obj = $(this);

      if (!params.listen && (params.remove || params.append || params.src || params.prepend) ) {
        params.thing = params.thing;
        params = containerSafeThing(params, params.thingId);
        if (params.remove){params.event_key = 'remove';params.event_value = params.remove;};
	if (params.append){params.event_key = 'append';params.event_value = params.append;};
	if (params.prepend){params.event_key = 'prepend';params.event_value = params.prepend;};
	if (params.src){params.event_key = 'src';params.event_value = params.src;};
	registerThing(params);
	sendEvent(params,obj);
      } else if (params.follow){        
        followThing(params.follow);
      } else if (params.listen) {
	setTimeout(function() {
	  params = containerSafeThing(params, params.topic);
	  registerThing(params);
	  getEvents(params, obj);
        }, 100); //let's wait for everything to load.	
      }
      
      return this;
    }); 


/*
    var events = function() {
      alert("getting events");
    }
    var metadata = function() {
      alert("getting events");
    }
*/

    //$.fn.thing.events = function(params) { };  



    function getEvents(params, obj) {
      $.ajax({
        type: "GET",
        crossDomain: true,
	url: params.url+"/things/"+params.thingId+"/events?waitTime=20&after="+params.timestamp,
        dataType: "JSON",   
        success: function(json) {
      	  updateElement(json, params, obj);
        }
      });    
    };

    function sendEvent(params, obj) {
      $.ajax({
  	type: "POST",
        url: params.url+"/things/"+params.thingId+"/events?keep-stored=true",
	data: '{"'+params.event_key+'": "'+encodeURIComponent(params.event_value)+'"}',
        contentType: "application/json",
	dataType: "JSON",
      });
    };

    function registerThing(params) {
      $.ajax({
        type: "POST",
        crossDomain: true,
        url: params.url+"/things",
	data: '{"thingId": "'+params.thingId+'","name": "'+params.thingName+'","type": "'+params.thingType+'"}',
        contentType: "application/json",
	dataType: "JSON",
      });
    };

    function followThing(thingIdToFollow) {
      $.ajax({
        type: "POST",
        crossDomain: true,
        url: params.url+"/things/"+paramsthingId+"/follow",
	data: '["'+thingIdToFollow+'"]',
        contentType: "application/json",
	dataType: "JSON",
      });       
    }

    function updateElement(json,params, obj) {
       $.each(json, function(index, jsonobj){	 
	  if(jsonobj.info == null) { 	 
            return false;
          } 	 
          $.each(jsonobj.info, function(key,value){
	     if (key == 'append') {
                obj.append(decodeURI(value));		
	     }
	     if (key == 'prepend') {
                obj.prepend(decodeURI(value));		
	     }
             //TODO: parse li/p
	     if (key == 'remove') {                
	        if ( jQuery(obj).is('ul') ) {
	           $("li:contains('"+decodeURI(value)+"')").remove();	  
	        }
 	        if ( jQuery(obj).is('div') ) {	   
	           $("p:contains('"+decodeURI(value)+"')").remove();	  
	        }
             }
 	     if (key == 'src') {
                obj.attr("src", value);
             }
             params.timestamp = jsonobj.serverTimestamp;//update object with latest timestamp   
          });
       });
       getEvents(params,obj); //loop until the end of time searching for events
    };

    function getCookie(c_name){
      var i,x,y,ARRcookies=document.cookie.split(";");
      for (i=0;i<ARRcookies.length;i++) {
        x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
        y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
        x=x.replace(/^\s+|\s+$/g,"");
        if (x==c_name) {
          return unescape(y);
        }
      }
    };

    //if a cookie "display_id" is set change thingid to add such id, unless functionality toggled false.
    function containerSafeThing(params, thingId) { 
      if (params.container) {
        var display=getCookie("display_id");
        if (display!=null && display!="") {	  
	  params.thingId = params.thingId + display;
	}
      }      
      return params;
    };


  }  
})(jQuery);
